{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPzNG93QT+GZRQcfHHxW9O8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dfPY5vM4QsZF","executionInfo":{"status":"ok","timestamp":1750535206175,"user_tz":-330,"elapsed":2140,"user":{"displayName":"Manjiri Jog","userId":"12337801403115640189"}},"outputId":"02591767-75df-42a1-9774-37b1be3ba8da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import pickle\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Load all required data and models\n","root_path=\"/content/drive/MyDrive/Upgrad_CapstoneProject/pickle/\"\n","user_final_rating = pickle.load(open(root_path+\"user_final_rating.pkl\", \"rb\"))\n","prod_reviews_final_data = pickle.load(open(root_path+\"prod_reviews_final_data.pkl\", \"rb\"))\n","tfidf_vectorizer = pickle.load(open(root_path+\"tfidf_vectorizer.pkl\", \"rb\"))\n","logreg = pickle.load(open(root_path+\"final_model.pkl\", \"rb\"))\n","\n","def get_sentiment_recommendations(user):\n","    if user in user_final_rating.index:\n","        recommendations = list(user_final_rating.loc[user].sort_values(ascending=False)[:20].index)\n","        temp = prod_reviews_final_data[prod_reviews_final_data['id'].isin(recommendations)].copy()\n","        X = tfidf_vectorizer.transform(temp[\"text_reviews_combined\"].astype(str))\n","        temp[\"predicted_sentiment\"] = logreg.predict(X)\n","        temp = temp[[\"name\", \"predicted_sentiment\"]]\n","        temp_grouped = temp.groupby(\"name\", as_index=False).count()\n","        temp_grouped[\"pos_review_count\"] = temp_grouped[\"name\"].apply(\n","            lambda x: temp[(temp[\"name\"] == x) & (temp[\"predicted_sentiment\"] == 1)][\"predicted_sentiment\"].count()\n","        )\n","        temp_grouped[\"total_review_count\"] = temp_grouped[\"predicted_sentiment\"]\n","        temp_grouped[\"pos_sentiment_percent\"] = np.round(\n","            temp_grouped[\"pos_review_count\"] / temp_grouped[\"total_review_count\"] * 100, 2\n","        )\n","        return temp_grouped.sort_values(\"pos_sentiment_percent\", ascending=False)\n","    else:\n","        return f\"User name '{user}' doesn't exist.\"\n","\n","#\"\"\"function to classify the sentiment to 1/0 - positive or negative - using the trained ML model\"\"\"\n","\n","def classify_sentiment(self, review_text):\n","        review_text = self.preprocess_text(review_text)\n","        X = self.vectorizer.transform([review_text])\n","        y_pred = self.model.predict(X)\n","        return y_pred\n"]},{"cell_type":"code","source":[],"metadata":{"id":"7oQOA41wQvkc"},"execution_count":null,"outputs":[]}]}